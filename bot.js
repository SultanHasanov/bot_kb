import { Telegraf, Markup } from "telegraf";
import fetch from "node-fetch";

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const TELEGRAM_TOKEN = "7763286167:AAFftKWBw7-ru7SGOdKD8oYUP-IXeQq_AKM"; // —Ç–æ–∫–µ–Ω BotFather
const CLIENT_ID = "2z1waD-HkKPAaUiJiv1862UGVkFV9WlfxwloqGZ0QUY";
const CLIENT_SECRET = "XatRJjQjw8QZlpBmlLA4Blx7Swm-wRpxg8e2zYY4QEg";

// === –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ ===
const bot = new Telegraf(TELEGRAM_TOKEN);

// === –û–±—ä–µ–∫—Ç —Å –∫—É—Ä—Å–∞–º–∏ ===
const courses = {
  259562: "–û—Å–Ω–æ–≤—ã Python (–æ–Ω–ª–∞–π–Ω)",
  258736: "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python –≤ –∑–∞–¥–∞—á–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
  258735: "–û–ª–∏–º–ø–∏–∞–¥–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ C++",
  258733: "–û—Å–Ω–æ–≤—ã Python",
  258624: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä"
};

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Teachbase ===
async function getToken() {
  const resp = await fetch("https://go.teachbase.ru/oauth/token", {
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body: new URLSearchParams({
      client_id: CLIENT_ID,
      client_secret: CLIENT_SECRET,
      grant_type: "client_credentials",
      scope: "public",
    }),
  });
  const data = await resp.json();
  return data.access_token;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ ===
async function getTaskStatsPage(token, courseId, page) {
  const url = `https://go.teachbase.ru/endpoint/v1/courses/${courseId}/task_stats?per_page=100&page=${page}`;

  const resp = await fetch(url, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
  });

  const data = await resp.json();
  return data;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å 20 —Å—Ç—Ä–∞–Ω–∏—Ü ===
async function getAllTaskStats(token, courseId) {
  let allTasks = [];
  for (let page = 1; page <= 20; page++) {
    const tasks = await getTaskStatsPage(token, courseId, page);
    if (Array.isArray(tasks) && tasks.length > 0) {
      allTasks = allTasks.concat(tasks);
    } else {
      break; // –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
    }
  }
  return allTasks;
}

// === –ü–æ–¥—Å—á—ë—Ç unchecked –∑–∞–¥–∞–Ω–∏–π ===
function countUnchecked(tasks) {
  if (!Array.isArray(tasks)) return 0;
  return tasks.filter((t) => t.checked === false).length;
}

// === –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫—É—Ä—Å–∞–º–∏ ===
function createCoursesKeyboard() {
  const buttons = Object.entries(courses).map(([id, name]) => 
    Markup.button.callback(name, `course_${id}`)
  );
  
  return Markup.inlineKeyboard(buttons, { columns: 1 });
}

// === –ö–æ–º–∞–Ω–¥–∞ /start ===
bot.start((ctx) => {
  const keyboard = createCoursesKeyboard();
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:",
    keyboard
  );
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–æ–≤ ===
bot.action(/course_(\d+)/, async (ctx) => {
  try {
    const courseId = ctx.match[1];
    const courseName = courses[courseId];
    
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞..."
    await ctx.editMessageText("–ó–∞–≥—Ä—É–∑–∫–∞...", { reply_markup: { inline_keyboard: [] } });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await ctx.answerCbQuery(`–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${courseName}...`);
    
    const token = await getToken();
    if (!token) {
      await ctx.editMessageText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Teachbase");
      return;
    }

    const allTasks = await getAllTaskStats(token, courseId);
    const uncheckedCount = countUnchecked(allTasks);

    await ctx.editMessageText(
      `üìä –ö—É—Ä—Å: ${courseName}\n–ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${uncheckedCount}`,
      Markup.inlineKeyboard([
        Markup.button.callback('‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å', 'back_to_courses')
      ])
    );
  } catch (err) {
    console.error(err);
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö");
    await ctx.editMessageText("–û—à–∏–±–∫–∞: " + err.message);
  }
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º" ===
bot.action('back_to_courses', async (ctx) => {
  const keyboard = createCoursesKeyboard();
  await ctx.editMessageText(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:",
    keyboard
  );
});

// === –ö–æ–º–∞–Ω–¥–∞ /unchecked (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞) ===
bot.command("unchecked", (ctx) => {
  const keyboard = createCoursesKeyboard();
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:",
    keyboard
  );
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");